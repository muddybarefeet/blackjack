// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.Hand = (function(superClass) {
  extend(Hand, superClass);

  function Hand() {
    return Hand.__super__.constructor.apply(this, arguments);
  }

  Hand.prototype.model = Card;

  Hand.prototype.initialize = function(array, deck, isDealer, playerScore1) {
    this.deck = deck;
    this.isDealer = isDealer;
    this.playerScore = playerScore1;
  };

  Hand.prototype.hit = function() {
    var card;
    console.log(this.minScore());
    if (this.isDealer) {
      if (this.whoWinsStr(this.minScore, this.playerScore)) {
        alert(this.whoWinsStr(this.minScore, this.playerScore));
      } else {
        card = this.deck.pop();
        this.add(card);
        this.hit();
      }
    }
    if (!this.isDealer) {
      card = this.deck.pop();
      if (card.get('value') + this.minScore() > 21) {
        this.add(card);
        return alert("You Lose");
      } else {
        this.add(card);
        return this.last();
      }
    }
  };

  Hand.prototype.whoWinsStr = function(minScore, playerScore) {
    if (minScore() >= 17 && minScore <= 21) {
      if (minScore() > playerScore) {
        return "You Loose!";
      } else if (minScore() === playerScore) {
        return "You Push!";
      } else {
        return "You Win!!";
      }
    } else if (minScore() > 21) {
      return "You Win!!";
    }
  };

  Hand.prototype.stand = function() {
    this.playerScore = this.minScore();
    return this.trigger('stand', this);
  };

  Hand.prototype.last = function() {

    /*return the last card in the deck */
  };

  Hand.prototype.hasAce = function() {
    return this.reduce(function(memo, card) {
      return memo || card.get('value') === 1;
    }, 0);
  };

  Hand.prototype.minScore = function() {
    return this.reduce(function(score, card) {
      return score + (card.get('revealed') ? card.get('value') : 0);
    }, 0);
  };

  Hand.prototype.scores = function() {
    return [this.minScore(), this.minScore() + 10 * this.hasAce()];
  };

  return Hand;

})(Backbone.Collection);
